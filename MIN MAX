import math

# Initialize the board
board = [['' for _ in range(3)] for _ in range(3)]

# Display the board
def print_board():
    for row in board:
        print(' | '.join(cell or ' ' for cell in row))
        print('-' * 9)

# Check winner or tie
def check_winner():
    # Rows and columns
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != '':
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] != '':
            return board[0][i]

    # Diagonals
    if board[0][0] == board[1][1] == board[2][2] != '':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != '':
        return board[0][2]

    # Tie
    if all(cell != '' for row in board for cell in row):
        return 'tie'

    return None

# Minimax algorithm
def minimax(depth, is_maximizing):
    result = check_winner()
    if result:
        if result == 'X':
            return 1
        elif result == 'O':
            return -1
        else:
            return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '':
                    board[i][j] = 'X'
                    score = minimax(depth + 1, False)
                    board[i][j] = ''
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '':
                    board[i][j] = 'O'
                    score = minimax(depth + 1, True)
                    board[i][j] = ''
                    best_score = min(score, best_score)
        return best_score

# Best move for AI (X)
def best_move():
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == '':
                board[i][j] = 'X'
                score = minimax(0, False)
                board[i][j] = ''
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Play the game
def play_game():
    print("Welcome to Tic-Tac-Toe!")
    print("You are O, AI is X.")
    print_board()

    while True:
        # Human move
        while True:
            try:
                row = int(input("Enter row (0-2): "))
                col = int(input("Enter col (0-2): "))
                if board[row][col] == '':
                    board[row][col] = 'O'
                    break
                else:
                    print("Cell already taken!")
            except (ValueError, IndexError):
                print("Invalid input. Try again.")

        print_board()
        result = check_winner()
        if result:
            break

        # AI move
        print("AI is thinking...")
        move = best_move()
        if move:
            board[move[0]][move[1]] = 'X'
        print_board()
        result = check_winner()
        if result:
            break

    if result == 'tie':
        print("It's a tie!")
    else:
        print(f"{result} wins!")

# Start the game
play_game()
